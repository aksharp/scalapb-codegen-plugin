{{#root}}
/*
package {{javaPackage}}.example.test

import {{javaPackage}}._
import org.scalatest.{Matchers, WordSpec}
import scala.concurrent.duration.Duration
import scala.concurrent.{Await, ExecutionContext}

class ExampleSpec extends WordSpec with Matchers {

  implicit val ec: ExecutionContext = scala.concurrent.ExecutionContext.global

// TODO: start server before testing (refer to example main in {{javaPackage}}.Main)

{{#services}}
    {{#serviceMethods}}
        {{#value}}

  "{{serviceName}}.{{methodName}} test. Example test against running server returning default empty {{methodOutputType}}()" in {

    val futureResult = client.{{serviceName}}.{{methodName}}(
      request = {{methodInputType}}()
    )
    val result = Await.result(futureResult, Duration.Inf)
    val expectedResult = {{methodOutputType}}()
    result should be (expectedResult)

  }

        {{/value}}
    {{/serviceMethods}}
{{/services}}

}

*/
{{/root}}