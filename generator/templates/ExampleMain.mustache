{{#root}}
/*
package {{javaPackage}}

import scala.concurrent.Future
import scala.concurrent.ExecutionContext
import scala.concurrent.ExecutionContext.global

object Main extends App {

    implicit val ec: ExecutionContext = global

    server.run(
        {{#servicesAsArguments}}
            {{#value}}
                {{serviceName}} = new {{serviceTypeName}}Service
            {{/value}}{{separator}}
        {{/servicesAsArguments}}
    )

}

{{#serviceMethods}}
class {{serviceTypeName}}Service extends {{serviceTypeName}}Grpc.{{serviceTypeName}} {
{{#methods}}
    override def {{methodName}}(req: {{methodInputType}}): Future[{{methodOutputType}}] = {
        // TODO: implement me
        // example (to return default empty type): Future.successful({{methodOutputType}}())
        ???
    }
{{/methods}}
}

{{/serviceMethods}}
*/
{{/root}}