{{#root}}

    package {{javaPackage}}.mocks

    import {{javaPackage}}._
    import org.scalacheck.Gen

    import scala.concurrent.Future


    // Stubs

    {{#messages}}
        object a{{messageTypeName}} {

        def apply(
        {{#fields}}
            {{#value}}{{fieldName}}: {{fieldTypeName}} = {{fieldGenerator}}{{/value}}{{separator}}
        {{/fields}}
        ): {{messageTypeName}} = {{messageTypeName}}(
        {{#fields}}
            {{#value}}
                {{fieldName}} = {{fieldNameOrOptionalOrSeq}}{{separator}}
            {{/value}}
        {{/fields}}
        )

        }
    {{/messages}}


    // Generators

    {{#messages}}
        object {{messageTypeName}}Gen {
        def apply(): Gen[{{messageTypeName}}] =
        for {
        {{#fields}}
            {{#value}}
                {{fieldName}} <- {{fieldForExpressionGenerator}}
            {{/value}}
        {{/fields}}
        } yield {
            {{messageTypeName}}(
            {{#fields}}
                {{#value}}
                    {{fieldName}} = {{fieldNameOrOptionalOrSeq}}{{separator}}
                {{/value}}
            {{/fields}}
            )
        }
        }
    {{/messages}}

    {{#services}}
        case class {{serviceTypeName}}Mock(
        {{#serviceMethods}}
            {{#value}}{{methodName}}Mock: {{methodInputType}} => Future[{{methodOutputType}}] = _ => Future.successful(a{{methodOutputType}}()){{/value}}{{separator}}
        {{/serviceMethods}}
        ) extends {{serviceTypeName}}Grpc.{{serviceTypeName}} {
        {{#serviceMethods}}
            {{#value}}
                override def {{methodName}}(request: {{methodInputType}}): Future[{{methodOutputType}}] = {{methodName}}Mock(request)
            {{/value}}
        {{/serviceMethods}}
        }

    {{/services}}


{{/root}}