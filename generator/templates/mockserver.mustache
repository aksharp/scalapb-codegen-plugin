{{#root}}
package {{javaPackage}}

{{#services}}
import {{serviceTypeName}}Grpc._
{{/services}}

import io.grpc.Server
import io.grpc.netty.NettyServerBuilder
import io.grpc.protobuf.services.ProtoReflectionService
import scala.concurrent.ExecutionContext

object mockserver { self =>
    private[this] var s: Server = null
    private val port = {{port}}

    def run(
{{#servicesAsArguments}}
            {{#value}}{{serviceName}}: {{serviceTypeName}}Grpc.{{serviceTypeName}}{{/value}}{{separator}}
{{/servicesAsArguments}}
    )
    (implicit ec: ExecutionContext): Unit = {
        s = NettyServerBuilder
            .forPort(port)
    {{#services}}
            .addService({{serviceTypeName}}Grpc.bindService({{serviceName}}, ec))
    {{/services}}
            .addService(ProtoReflectionService.newInstance())
            .build
            .start

        System.out.println(s"*** running mock gRPC server on port $port")

        sys.addShutdownHook {
            System.err.println("*** shutting down mock gRPC server since JVM is shutting down")
            self.stop()
            System.err.println("*** mock server shut down")
        }

        s.awaitTermination()
    }

    def stop(): Unit = if (s != null) { s.shutdownNow() }

}
{{/root}}